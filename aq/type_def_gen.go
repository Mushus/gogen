// Code generated by structgen; DO NOT EDIT.

package aq

import (
	"go/ast"
)

func NewTypeDef(
	spec *ast.TypeSpec,
) *TypeDef {
	c := &TypeDef{
		spec: spec,
	}

	return c
}

type TypeDefs []*TypeDef

func (r TypeDefs) Chunk(size int) []TypeDefs {
	list := []TypeDefs{}
	chunk := TypeDefs{}
	for _, v := range r {
		chunk := append(chunk, v)
		if len(chunk) >= size {
			list = append(list, chunk)
			chunk = TypeDefs{}
		}
	}
	if len(chunk) > 0 {
		list = append(list, chunk)
	}
	return list
}

func (r TypeDefs) Compact() TypeDefs {
	l := TypeDefs{}
	for _, v := range r {
		if v == nil {
			l = append(l, v)
		}
	}
	return l
}

func (r TypeDefs) Concat(l TypeDefs) TypeDefs {
	return append(append(TypeDefs{}, r...), l...)
}

func (r TypeDefs) Copy() TypeDefs {
	dist := make(TypeDefs, len(r))
	copy(dist, r)
	return dist
}

func (r TypeDefs) Count() int {
	return len(r)
}

func (r TypeDefs) Each(f func(i int, v *TypeDef)) {
	for i, v := range r {
		f(i, v)
	}
}

func (r TypeDefs) Exists() bool {
	return r != nil && len(r) > 0
}

func (r TypeDefs) Every(f func(i int, v *TypeDef) bool) bool {
	for i, v := range r {
		if !f(i, v) {
			return false
		}
	}
	return true
}

func (r TypeDefs) Filter(funcs ...func(i int, v *TypeDef) bool) TypeDefs {
	list := TypeDefs{}
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		list = append(list, v)
	}
	return list
}

func (r TypeDefs) Find(funcs ...func(i int, v *TypeDef) bool) *TypeDef {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return v
	}
	return nil
}

func (r TypeDefs) FindIndex(funcs ...func(i int, v *TypeDef) bool) int {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return i
	}
	return -1
}

func (r TypeDefs) First() *TypeDef {
	if len(r) == 0 {
		return nil
	}
	return r[0]
}

func (r TypeDefs) ForPage(pageNo int, size int) TypeDefs {
	rLen := len(r)
	list := make(TypeDefs, 0, size)
	for i, k := pageNo*size, 0; i < rLen && k < size; i, k = i+1, k+1 {
		list = append(list, r[i])
	}
	return list
}

func (r TypeDefs) Get(i int) *TypeDef {
	if 0 <= i && i < len(r) {
		return r[i]
	}
	return nil
}

func (r TypeDefs) Has(f func(i int, v *TypeDef) bool) bool {
	return r.Some(f)
}

func (r TypeDefs) IsEmpty() bool {
	return len(r) == 0
}

func (r TypeDefs) IsNotEmpty() bool {
	return len(r) > 0
}

func (r TypeDefs) Last() *TypeDef {
	if len(r) == 0 {
		return nil
	}
	return r[len(r)-1]
}

func (r TypeDefs) Reverse() TypeDefs {
	list := make(TypeDefs, 0, len(r))
	for i := len(r) - 1; i >= 0; i-- {
		list = append(list, r[i])
	}
	return list
}

func (r TypeDefs) Some(f func(i int, v *TypeDef) bool) bool {
	for i, v := range r {
		if f(i, v) {
			return true
		}
	}
	return false
}

func (r TypeDefs) Take(size int) TypeDefs {
	if len(r) > size {
		return r
	}
	return r[:size]
}

func (r TypeDefs) Specs() []*ast.TypeSpec {
	l := make([]*ast.TypeSpec, 0, len(r))
	for _, r := range r {
		l = append(l, r.spec)
	}
	return l
}
