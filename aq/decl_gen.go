// Code generated by structgen; DO NOT EDIT.

package aq

import (
	"go/ast"
)

func NewDecl(
	decl ast.Decl,
) *Decl {
	c := &Decl{
		decl: decl,
	}

	return c
}

type Decls []*Decl

func (r Decls) Chunk(size int) []Decls {
	list := []Decls{}
	chunk := Decls{}
	for _, v := range r {
		chunk := append(chunk, v)
		if len(chunk) >= size {
			list = append(list, chunk)
			chunk = Decls{}
		}
	}
	if len(chunk) > 0 {
		list = append(list, chunk)
	}
	return list
}

func (r Decls) Compact() Decls {
	l := Decls{}
	for _, v := range r {
		if v == nil {
			l = append(l, v)
		}
	}
	return l
}

func (r Decls) Concat(l Decls) Decls {
	return append(append(Decls{}, r...), l...)
}

func (r Decls) Copy() Decls {
	dist := make(Decls, len(r))
	copy(dist, r)
	return dist
}

func (r Decls) Count() int {
	return len(r)
}

func (r Decls) Each(f func(i int, v *Decl)) {
	for i, v := range r {
		f(i, v)
	}
}

func (r Decls) Exists() bool {
	return r != nil && len(r) > 0
}

func (r Decls) Every(f func(i int, v *Decl) bool) bool {
	for i, v := range r {
		if !f(i, v) {
			return false
		}
	}
	return true
}

func (r Decls) Filter(funcs ...func(i int, v *Decl) bool) Decls {
	list := Decls{}
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		list = append(list, v)
	}
	return list
}

func (r Decls) Find(funcs ...func(i int, v *Decl) bool) *Decl {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return v
	}
	return nil
}

func (r Decls) FindIndex(funcs ...func(i int, v *Decl) bool) int {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return i
	}
	return -1
}

func (r Decls) First() *Decl {
	if len(r) == 0 {
		return nil
	}
	return r[0]
}

func (r Decls) ForPage(pageNo int, size int) Decls {
	rLen := len(r)
	list := make(Decls, 0, size)
	for i, k := pageNo*size, 0; i < rLen && k < size; i, k = i+1, k+1 {
		list = append(list, r[i])
	}
	return list
}

func (r Decls) Get(i int) *Decl {
	if 0 <= i && i < len(r) {
		return r[i]
	}
	return nil
}

func (r Decls) Has(f func(i int, v *Decl) bool) bool {
	return r.Some(f)
}

func (r Decls) IsEmpty() bool {
	return len(r) == 0
}

func (r Decls) IsNotEmpty() bool {
	return len(r) > 0
}

func (r Decls) Last() *Decl {
	if len(r) == 0 {
		return nil
	}
	return r[len(r)-1]
}

func (r Decls) Reverse() Decls {
	list := make(Decls, 0, len(r))
	for i := len(r) - 1; i >= 0; i-- {
		list = append(list, r[i])
	}
	return list
}

func (r Decls) Some(f func(i int, v *Decl) bool) bool {
	for i, v := range r {
		if f(i, v) {
			return true
		}
	}
	return false
}

func (r Decls) Take(size int) Decls {
	if len(r) > size {
		return r
	}
	return r[:size]
}

func (r Decls) Types() []TypeDefs {
	l := make([]TypeDefs, 0, len(r))
	for _, r := range r {
		l = append(l, r.Types())
	}
	return l
}
