// Code generated by structgen; DO NOT EDIT.

package test

func NewTestStruct(
	typ string,
	hoge int,
	Width int,
	name string,
	star *int,
) *testStruct {
	c := &testStruct{
		typ:   typ,
		hoge:  hoge,
		Width: Width,
		name:  name,
		star:  star,
	}
	c.construct()

	return c
}

func (r testStruct) Typ() string {
	return r.typ
}

func (r testStruct) Name() string {
	return r.name
}

func (r testStruct) Star() *int {
	return r.star
}

func (r *testStruct) SetTyp(typ string) {
	r.typ = typ
}

func (r *testStruct) SetHoge(hoge int) {
	r.hoge = hoge
}

func (r *testStruct) Rename(name string) {
	r.name = name
}

func (r *testStruct) SetStar(star *int) {
	r.star = star
}

type testStructList []*testStruct

func (r testStructList) Chunk(size int) []testStructList {
	list := []testStructList{}
	chunk := testStructList{}
	for _, v := range r {
		chunk := append(chunk, v)
		if len(chunk) >= size {
			list = append(list, chunk)
			chunk = testStructList{}
		}
	}
	if len(chunk) > 0 {
		list = append(list, chunk)
	}
	return list
}

func (r testStructList) Concat(list testStructList) testStructList {
	return append(append(testStructList{}, r...), list...)
}

func (r testStructList) Copy() testStructList {
	dist := make(testStructList, len(r))
	copy(dist, r)
	return dist
}

func (r testStructList) Count() int {
	return len(r)
}

func (r testStructList) Each(f func(i int, v *testStruct)) {
	for i, v := range r {
		f(i, v)
	}
}

func (r testStructList) Exists() bool {
	return r != nil && len(r) > 0
}

func (r testStructList) Every(f func(i int, v *testStruct) bool) bool {
	for i, v := range r {
		if !f(i, v) {
			return false
		}
	}
	return true
}

func (r testStructList) Filter(funcs ...func(i int, v *testStruct) bool) testStructList {
	list := testStructList{}
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		list = append(list, v)
	}
	return list
}

func (r testStructList) Find(funcs ...func(i int, v *testStruct) bool) *testStruct {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return v
	}
	return nil
}

func (r testStructList) FindIndex(funcs ...func(i int, v *testStruct) bool) int {
L:
	for i, v := range r {
		for _, f := range funcs {
			if !f(i, v) {
				continue L
			}
		}
		return i
	}
	return -1
}

func (r testStructList) First() *testStruct {
	if len(r) == 0 {
		return nil
	}
	return r[0]
}

func (r testStructList) ForPage(pageNo int, size int) testStructList {
	rLen := len(r)
	list := make(testStructList, 0, size)
	for i, k := pageNo*size, 0; i < rLen && k < size; i, k = i+1, k+1 {
		list = append(list, r[i])
	}
	return list
}

func (r testStructList) Get(i int) *testStruct {
	if 0 <= i && i < len(r) {
		return r[i]
	}
	return nil
}

func (r testStructList) IsEmpty() bool {
	return len(r) == 0
}

func (r testStructList) IsNotEmpty() bool {
	return len(r) > 0
}

func (r testStructList) Last() *testStruct {
	if len(r) == 0 {
		return nil
	}
	return r[len(r)-1]
}

func (r testStructList) Reverse() testStructList {
	list := make(testStructList, 0, len(r))
	for i := len(r) - 1; i >= 0; i-- {
		list = append(list, r[i])
	}
	return list
}

func (r testStructList) Some(f func(i int, v *testStruct) bool) bool {
	for i, v := range r {
		if f(i, v) {
			return true
		}
	}
	return false
}

func (r testStructList) Take(size int) testStructList {
	if len(r) > size {
		return r
	}
	return r[:size]
}

func TestStructTypIs(value string) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.typ == value
	}
}

func TestStructTypIsNot(value string) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.typ != value
	}
}

func TestStructHogeIs(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge == value
	}
}

func TestStructHogeIsNot(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge != value
	}
}

func TestStructHogeGT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge > value
	}
}

func TestStructHogeGE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge >= value
	}
}

func TestStructHogeLT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge < value
	}
}

func TestStructHogeLE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.hoge <= value
	}
}

func TestStructWidthIs(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width == value
	}
}

func TestStructWidthIsNot(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width != value
	}
}

func TestStructWidthGT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width > value
	}
}

func TestStructWidthGE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width >= value
	}
}

func TestStructWidthLT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width < value
	}
}

func TestStructWidthLE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.Width <= value
	}
}

func TestStructNameIs(value string) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.name == value
	}
}

func TestStructNameIsNot(value string) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return v.name != value
	}
}

func TestStructStarIs(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star == value
	}
}

func TestStructStarIsNot(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star != value
	}
}

func TestStructStarGT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star > value
	}
}

func TestStructStarGE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star >= value
	}
}

func TestStructStarLT(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star < value
	}
}

func TestStructStarLE(value int) func(i int, v *testStruct) bool {
	return func(i int, v *testStruct) bool {
		return *v.star <= value
	}
}
